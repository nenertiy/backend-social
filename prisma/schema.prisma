// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  username      String    @unique
  email         String    @unique
  password      String
  walletAddress String?   @map("wallet_address")
  github        String?   @unique
  posts         Post[]
  comments      Comment[]
  avatar        File[]
}

model Post {
  id        String    @id @default(uuid())
  title     String
  content   String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  file      File[]
  comments  Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

model File {
  id       String  @id @default(uuid())
  url      String
  filename String
  postId   String? @map("post_id")
  post     Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId   String? @map("user_id")
  user     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
