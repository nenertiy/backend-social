services:
  app:
    build: .
    container_name: backend-social
    environment:
      DATABASE_URL: postgresql://postgres:password@postgres:5432/social?schema=public
      ACCESS_TOKEN: ${ACCESS_TOKEN}
      REFRESH_TOKEN: ${REFRESH_TOKEN}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      S3_REGION: ${S3_REGION}
      S3_ENDPOINT: ${S3_ENDPOINT}
      PORT: 4000
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - '4000:4000'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: 'pnpm run start'
    networks:
      - backend

  postgres:
    container_name: postgres-social
    image: postgres:17-alpine3.21
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: social
    ports:
      - '5434:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis-social
    restart: always
    ports:
      - '6379:6379'
    networks:
      - backend
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 3

  minio:
    image: minio/minio
    container_name: minio-social
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - '9000:9000'
      - '9001:9001'
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - backend

volumes:
  postgres_data:
  minio_data:

networks:
  backend:
